#!/usr/bin/env python

import argparse
import json
import logging
import os
import subprocess
import urllib2
import uuid


def get_ansible_facts():
    # I know I can use the regular ansible api for this, but I'm not adding
    # 50 extra lines just for that:
    #
    # http://docs.ansible.com/ansible/developing_api.html

    process = subprocess.Popen(
        ['ansible', '-m', 'setup', '-c', 'local', '--one-line', 'localhost'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )

    stdout, _ = process.communicate()

    response = json.loads(stdout.replace('localhost | SUCCESS => ', ''))
    return response['ansible_facts']


def get_log_id():
    with open('{{deskpro_install_uuid_filename}}') as uuidf:
        return uuidf.read()


def log_start(args):
    # The usual race condition applies here, but if we're trying to start
    # logging more than once at the same time, there's probably something
    # fishier going on
    if not os.path.isfile('{{deskpro_install_uuid_filename}}'):
        with open('{{deskpro_install_uuid_filename}}', 'w') as uuidfile:
            uuidfile.write(str(uuid.uuid4()))

    log_id = get_log_id()

    facts = get_ansible_facts()

    log_post_json(log_id, 'start', {
        'os': {
            'name': facts['ansible_lsb']['description'],
            'virtualization_role': facts['ansible_virtualization_role'],
            'virtualization_type': facts['ansible_virtualization_type'],
        },
        'hardware': {
            'cpus': facts['ansible_processor_count'],
            'memory': facts['ansible_memtotal_mb'],
        },
    })


def log_success(args):
    assert isinstance(args.duration, float)

    try:
        log_id = get_log_id()
    except IOError:
        logging.error('Trying to send "success" without starting')
        return

    log_post_json(log_id, 'success', {
        'duration': args.duration
    })


def log_failure(args):
    assert isinstance(args.duration, float)

    try:
        log_id = get_log_id()
    except IOError:
        logging.error('Trying to send "failure" without starting')
        return

    log_post_json(log_id, 'error', {
        'duration': args.duration,
        'summary': args.summary,
    })


def log_upload(args):
    try:
        log_id = get_log_id()
    except IOError:
        logging.error('Trying to "upload" without starting')
        return

    with open(args.file) as logfile:
        log = logfile.read()

    log_post_json(log_id, 'logs', log)


def build_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--debug',
        dest='loglevel',
        action='store_const',
        const=logging.DEBUG,
        default=logging.WARNING,
    )
    parser.add_argument(
        '--verbose',
        dest='loglevel',
        action='store_const',
        const=logging.INFO,
    )

    subparsers = parser.add_subparsers()

    parser_start = subparsers.add_parser('start')
    parser_start.set_defaults(func=log_start)

    parser_success = subparsers.add_parser('success')
    parser_success.add_argument('--duration', type=float, required=True)
    parser_success.set_defaults(func=log_success)

    parser_failure = subparsers.add_parser('failure')
    parser_failure.add_argument('--duration', type=float, required=True)
    parser_failure.add_argument('--summary', required=True)
    parser_failure.set_defaults(func=log_failure)

    parser_log = subparsers.add_parser('log')
    parser_log.add_argument('--file', required=True)
    parser_log.set_defaults(func=log_upload)


def log_post_json(log_id, action, data):
    log_type = '{{deskpro_install_log_type}}'
    url = 'http://app-stats.deskpro-service.com/installer/{}/{}/{}'

    request = urllib2.Request(url.format(log_type, log_id, action))

    if isinstance(data, dict):
        request.add_header('Content-Type', 'application/json')
        data = json.dumps(data)

    response = urllib2.urlopen(request, data)
    return response.read()


def main():
    parser = build_parser()

    args = parser.parse_args()

    logging.basicConfig(level=args.loglevel)

    args.func(args)


if __name__ == '__main__':
    main()
